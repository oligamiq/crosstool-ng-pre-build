name: Build toolchains

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'version of the toolchain to build'
        required: true
        default: 'v0.1.0'

      targets:
        description: 'targets to build'
        required: true
        default: '[
          "loongarch64-unknown-linux-gnu",
          "loongarch64-unknown-linux-musl",
          "powerpc-unknown-linux-gnu",
          "powerpc64-unknown-linux-gnu",
          "riscv64gc-unknown-linux-gnu",
          "aarch64-unknown-linux-gnu",
          "i586-unknown-linux-gnu",
          "i686-unknown-linux-gnu",
          "arm-unknown-linux-gnueabi",
          "arm-unknown-linux-gnueabihf",
          "armv7-unknown-linux-gnueabihf",
          "s390x-unknown-linux-gnu",
        ]'

      others-targets:
        description: 'targets to build'
        required: true
        default: '[
          "x86_64-unknown-netbsd",
          "x86_64-unknown-illumos",
          "x86_64-unknown-freebsd",
          "sparcv9-sun-solaris",
          "powerpc64le-unknown-linux-gnu",
        ]'

permissions:
  packages: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    # if none of the targets are in the list, the job will be skipped
    if: ${{ github.event.inputs.targets != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(github.event.inputs.targets) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: adjust permissions
        uses: ./.github/actions/permission

      - name: Setup crosstool-ng
        uses: ./.github/actions/setup-crosstool-ng
        with:
          # 'true' or 'false'
          is-patch: ${{ matrix.target == 'loongarch64-unknown-linux-gnu' || matrix.target == 'loongarch64-unknown-linux-musl' }}

      # https://github.com/rust-lang/rust/tree/46e8d20301cb4abe91ab0a4bea43bb085e1d4e4a/src/ci/docker/host-x86_64
      - name: Build toolchains
        if: matrix.target != 'riscv64gc-unknown-linux-gnu'
        run: |
          cd /tmp
          cp '${{ github.workspace }}/configs/${{ matrix.target }}.defconfig' crosstool.defconfig
          rm -rf build
          bash -x '${{ github.workspace }}/scripts/crosstool-ng-build.sh'

      - name: Build toolchains for riscv64gc-unknown-linux-gnu
        if: matrix.target == 'riscv64gc-unknown-linux-gnu'
        run: |
          cd /tmp
          cp '${{ github.workspace }}/configs/${{ matrix.target }}/${{ matrix.target }}.defconfig' crosstool.defconfig
          cp -r '${{ github.workspace }}/configs/${{ matrix.target }}/patches' /tmp/patches
          rm -rf build
          bash -x '${{ github.workspace }}/scripts/crosstool-ng-build.sh'
          rm -rf /tmp/patches
          mv /x-tools/riscv64-unknown-linux-gnu /x-tools/riscv64gc-unknown-linux-gnu
          cd /x-tools/riscv64gc-unknown-linux-gnu/bin
          sudo rename 's/riscv64-unknown-linux-gnu/riscv64gc-unknown-linux-gnu/' riscv64-unknown-linux-gnu-*

      - name: Build toolchains for s390x-unknown-linux-gnu
        if: matrix.target == 's390x-unknown-linux-gnu'
        run: |
          mv /x-tools/s390x-ibm-linux-gnu /x-tools/s390x-unknown-linux-gnu
          cd /x-tools/s390x-unknown-linux-gnu/bin
          sudo rename 's/s390x-ibm-linux-gnu/s390x-unknown-linux-gnu/' s390x-ibm-linux-gnu-*

      - uses: ./.github/actions/crosstool-ng-rename
        with:
          target: ${{ matrix.target }}
          working-directory: /x-tools/${{ matrix.target }}/bin

      - name: Upload toolchains
        uses: ./.github/actions/commit-toolchain
        with:
          version: ${{ github.event.inputs.version }}
          target: ${{ matrix.target }}

  net-bsd:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.others-targets, 'x86_64-unknown-netbsd')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: adjust permissions
        uses: ./.github/actions/permission

      - name: Build toolchains
        env:
          HOST_CFLAGS: "-O -fcommon"
        run: |
          cd /tmp
          rm -rf netbsd
          sudo apt update
          sudo apt install -y rename
          bash ${{ github.workspace }}/scripts/build-netbsd-toolchain.sh

      - name: Upload toolchains
        uses: ./.github/actions/commit-toolchain
        with:
          version: ${{ github.event.inputs.version }}
          target: x86_64-unknown-netbsd

  illumos:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.others-targets, 'x86_64-unknown-illumos')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: adjust permissions
        uses: ./.github/actions/permission

      - name: Build toolchain
        run: |
          sudo apt-get update
          sudo apt install -y build-essential automake bison bzip2 ca-certificates cmake curl file flex g++ gawk gdb git gperf help2man libncurses-dev libssl-dev libtool-bin make ninja-build patch pkg-config python3 rsync sudo texinfo unzip wget xz-utils
          sudo apt install -y libgmp-dev libmpfr-dev libmpc-dev
          bash ${{ github.workspace }}/scripts/build-illumos-toolchain.sh x86_64 sysroot
          bash ${{ github.workspace }}/scripts/build-illumos-toolchain.sh x86_64 binutils
          bash ${{ github.workspace }}/scripts/build-illumos-toolchain.sh x86_64 gcc

      - name: Upload toolchains
        uses: ./.github/actions/commit-toolchain
        with:
          version: ${{ github.event.inputs.version }}
          target: x86_64-unknown-illumos

  freebsd:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.others-targets, 'x86_64-unknown-freebsd')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: adjust permissions
        uses: ./.github/actions/permission

      - name: Build toolchain
        run: |
          sudo apt-get update
          sudo apt install --no-install-recommends -y build-essential
          sudo apt install --no-install-recommends -y clang make ninja-build file curl ca-certificates git cmake sudo bzip2 xz-utils texinfo wget libssl-dev pkg-config
          sudo apt install --no-install-recommends -y software-properties-common libgmp-dev libmpfr-dev libmpc-dev
          sudo apt install --no-install-recommends -y flex automake bison bzip2 ca-certificates cmake curl file g++ gawk gdb git gperf help2man libncurses-dev libssl-dev libtool-bin make ninja-build patch pkg-config rsync sudo texinfo unzip wget xz-utils
          mkdir build
          cd build
          bash ${{ github.workspace }}/scripts/build-freebsd-toolchain.sh x86_64
          cd "${GITHUB_WORKSPACE}"
          rm -rf build
          sudo apt install -y rename
          mv /x-tools/x86_64-unknown-freebsd12 /x-tools/x86_64-unknown-freebsd
          cd /x-tools/x86_64-unknown-freebsd/bin
          sudo rename 's/x86_64-unknown-freebsd12/x86_64-unknown-freebsd/' x86_64-unknown-freebsd12-*

      - uses: ./.github/actions/crosstool-ng-rename
        with:
          target: x86_64-unknown-freebsd
          working-directory: /x-tools/x86_64-unknown-freebsd/bin

      - name: Upload toolchains
        uses: ./.github/actions/commit-toolchain
        with:
          version: ${{ github.event.inputs.version }}
          target: x86_64-unknown-freebsd

  solaris:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.others-targets, 'sparcv9-sun-solaris')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: adjust permissions
        uses: ./.github/actions/permission

      - name: Build toolchain
        run: |
          sudo apt update
          sudo apt install -y build-essential
          sudo apt install -y software-properties-common libgmp-dev libmpfr-dev libmpc-dev
          sudo sed -i 's/^# deb-src/deb-src/' /etc/apt/sources.list
          sudo apt-key adv --batch --yes --keyserver keyserver.ubuntu.com --recv-keys 74DA7924C5513486
          sudo add-apt-repository -y 'deb https://apt.dilos.org/dilos dilos2 main'
          mkdir -p ~/build
          cd ~/build
          rm -rf solaris
          rm -rf gcc
          rm -rf /usr/local/sparcv9-sun-solaris2.10
          bash ${{ github.workspace }}/scripts/build-solaris-toolchain.sh sparcv9 sparcv9 solaris-sparc sun
          cd /
          rm -rf ~/build/
          ls -l "${ github.workspace }"
          mv /x-tools/sparcv9-sun-solaris2.10 /x-tools/sparcv9-sun-solaris
          cd /x-tools/sparcv9-sun-solaris/bin
          sudo rename 's/sparcv9-sun-solaris2.10/sparcv9-sun-solaris/' sparcv9-sun-solaris2.10-*

      - uses: ./.github/actions/crosstool-ng-rename
        with:
          target: sparcv9-sun-solaris
          working-directory: /x-tools/sparcv9-sun-solaris/bin

      - name: Upload toolchains
        uses: ./.github/actions/commit-toolchain
        with:
          version: ${{ github.event.inputs.version }}
          target: sparcv9-sun-solaris

  powerpc64le:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.others-targets, 'powerpc64le-unknown-linux-gnu')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: adjust permissions
        uses: ./.github/actions/permission

      - name: Build toolchain
        run: |
          sudo apt-get update
          sudo apt install -y build-essential
          sudo apt install -y rpm2cpio cpio
          mkdir -p ~/build
          cd ~/build
          bash ${{ github.workspace }}/toolchains/build-powerpc64le-toolchain.sh
          cd /
          rm -rf ~/build/

      - uses: ./.github/actions/crosstool-ng-rename
        with:
          target: powerpc64le-unknown-linux-gnu
          working-directory: /x-tools/powerpc64le-unknown-linux-gnu/bin

      - name: Upload toolchains
        uses: ./.github/actions/commit-toolchain
        with:
          version: ${{ github.event.inputs.version }}
          target: powerpc64le-unknown-linux-gnu
